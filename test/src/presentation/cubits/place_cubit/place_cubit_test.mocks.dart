// Mocks generated by Mockito 5.1.0 from annotations
// in find_thing/test/src/presentation/cubits/place_cubit/place_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:find_thing/src/core/failure.dart' as _i5;
import 'package:find_thing/src/domain/entities/place.dart' as _i7;
import 'package:find_thing/src/domain/use_cases/edit_place_use_case.dart'
    as _i6;
import 'package:find_thing/src/domain/use_cases/get_places_use_case.dart'
    as _i3;
import 'package:find_thing/src/domain/use_cases/remove_place_use_case.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [GetPlacesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPlacesUseCase extends _i1.Mock implements _i3.GetPlacesUseCase {
  MockGetPlacesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i4.Stream<dynamic>>> call(
          {dynamic params}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#params: params}),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i4.Stream<dynamic>>>.value(
                      _FakeEither_0<_i5.Failure, _i4.Stream<dynamic>>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i4.Stream<dynamic>>>);
}

/// A class which mocks [EditPlaceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockEditPlaceUseCase extends _i1.Mock implements _i6.EditPlaceUseCase {
  MockEditPlaceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> call({_i7.Place? params}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#params: params}),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}

/// A class which mocks [RemovePlaceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemovePlaceUseCase extends _i1.Mock
    implements _i8.RemovePlaceUseCase {
  MockRemovePlaceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> call({int? params}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#params: params}),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
