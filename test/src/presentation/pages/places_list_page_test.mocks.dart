// Mocks generated by Mockito 5.1.0 from annotations
// in find_thing/test/src/presentation/pages/places_list_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:ui' as _i8;

import 'package:bloc/bloc.dart' as _i9;
import 'package:find_thing/src/domain/entities/place.dart' as _i10;
import 'package:find_thing/src/domain/use_cases/check_and_ask_permission_use_case.dart'
    as _i4;
import 'package:find_thing/src/presentation/cubits/image_cubit/image_cubit.dart'
    as _i2;
import 'package:find_thing/src/presentation/cubits/permission_cubit/permission_cubit.dart'
    as _i5;
import 'package:find_thing/src/presentation/cubits/place_cubit/place_cubit.dart'
    as _i3;
import 'package:image_picker/image_picker.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeImageCubitState_0 extends _i1.Fake implements _i2.ImageCubitState {}

class _FakePlaceCubitState_1 extends _i1.Fake implements _i3.PlaceCubitState {}

class _FakeCheckAndAskPermissionUseCase_2 extends _i1.Fake
    implements _i4.CheckAndAskPermissionUseCase {}

class _FakePermissionCubitState_3 extends _i1.Fake
    implements _i5.PermissionCubitState {}

/// A class which mocks [ImageCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageCubit extends _i1.Mock implements _i2.ImageCubit {
  MockImageCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ImageCubitState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeImageCubitState_0()) as _i2.ImageCubitState);
  @override
  _i6.Stream<_i2.ImageCubitState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.ImageCubitState>.empty())
          as _i6.Stream<_i2.ImageCubitState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  dynamic pickImage(_i7.ImageSource? source) =>
      super.noSuchMethod(Invocation.method(#pickImage, [source]));
  @override
  _i6.Future<bool> savePlace({String? name, _i8.Image? image}) =>
      (super.noSuchMethod(
          Invocation.method(#savePlace, [], {#name: name, #image: image}),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  void emit(_i2.ImageCubitState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i9.Change<_i2.ImageCubitState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [PlaceCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlaceCubit extends _i1.Mock implements _i3.PlaceCubit {
  MockPlaceCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PlaceCubitState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakePlaceCubitState_1()) as _i3.PlaceCubitState);
  @override
  _i6.Stream<_i3.PlaceCubitState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.PlaceCubitState>.empty())
          as _i6.Stream<_i3.PlaceCubitState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  dynamic edit(_i10.Place? place) =>
      super.noSuchMethod(Invocation.method(#edit, [place]));
  @override
  dynamic remove(int? id) =>
      super.noSuchMethod(Invocation.method(#remove, [id]));
  @override
  void emit(_i3.PlaceCubitState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i9.Change<_i3.PlaceCubitState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [PermissionCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionCubit extends _i1.Mock implements _i5.PermissionCubit {
  MockPermissionCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.CheckAndAskPermissionUseCase get useCase =>
      (super.noSuchMethod(Invocation.getter(#useCase),
              returnValue: _FakeCheckAndAskPermissionUseCase_2())
          as _i4.CheckAndAskPermissionUseCase);
  @override
  _i5.PermissionCubitState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakePermissionCubitState_3()) as _i5.PermissionCubitState);
  @override
  _i6.Stream<_i5.PermissionCubitState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.PermissionCubitState>.empty())
          as _i6.Stream<_i5.PermissionCubitState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i6.Future<void> checkFile() =>
      (super.noSuchMethod(Invocation.method(#checkFile, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void emit(_i5.PermissionCubitState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i9.Change<_i5.PermissionCubitState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}
