// Mocks generated by Mockito 5.1.0 from annotations
// in find_thing/test/src/domain/use_cases/check_and_ask_permission_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:find_thing/src/domain/repositories/permission_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler/permission_handler.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [PermissionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionRepository extends _i1.Mock
    implements _i2.PermissionRepository {
  MockPermissionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.PermissionStatus> check(_i4.Permission? permission) =>
      (super.noSuchMethod(Invocation.method(#check, [permission]),
              returnValue: Future<_i4.PermissionStatus>.value(
                  _i4.PermissionStatus.denied))
          as _i3.Future<_i4.PermissionStatus>);
  @override
  _i3.Future<bool> openSettings() =>
      (super.noSuchMethod(Invocation.method(#openSettings, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
